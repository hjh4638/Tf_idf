<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  

  <mapper namespace="test">
  
	  <select id="sel1" resultType="Integer" >
		SELECT count(*) FROM knn.client_vector
	  </select>
	  <select id="sel2" resultType="ClientVector" >
		SELECT * FROM knn.client_vector
	  </select>
	  <select id="sel3" resultType="TrainedVector" >
		SELECT * FROM knn.trained_vector
	  </select>
	<insert id="insert1" parameterType="TrainedVector">  
		INSERT INTO knn.trained_vector
		( file_name, keyword, label, tf, idf, tf_idf, df, seq )
		VALUES
		(#{file_name}, #{keyword}, #{label}, #{tf}, #{idf}, #{tf_idf}, #{df}, #{seq})
	</insert>
	<insert id="insert2" parameterType="ClientVector">
		INSERT INTO knn.client_vector
		(id,file_name,keyword,tf, seq)
		VALUES
		(#{id},#{file_name},#{keyword},#{tf}, #{seq} )
 	</insert>
 	<delete id="reset1">
 		DELETE FROM knn.trained_vector
 	</delete>
 	<delete id="reset2">
 		DELETE FROM knn.client_vector
 	</delete>
 	<select id="getClientSeq" resultType="Integer">
 		SELECT 
		   IFNULL(max(id),0)+1 as id
		FROM
		    knn.client_vector
 	</select>
 	<select id="getKnnAvg" resultType = "KnnResult" parameterType="Integer">
SELECT 
    test.label, AVG(test.distance) AS average
FROM
    (SELECT 
        SQRT(SUM(POW(dimension.in_tf_idf - dimension.tr_tf_idf, 2))) AS distance,
            (SELECT DISTINCT
                    (label)
                FROM
                    knn.trained_vector
                WHERE
                    file_name = dimension.file_name
                LIMIT 1) AS label
    FROM
        (SELECT 
        IFNULL(input.keyword, trained.keyword) AS keyword,
            IFNULL(input.tf_idf, 0) AS in_tf_idf,
            IFNULL(trained.tf_idf, 0) AS tr_tf_idf,
            trained.file_name
    FROM
        (SELECT 
        input.keyword,
            input.tf,
            IFNULL(trained.idf, 0),
            input.tf * IFNULL(trained.idf, 0) / (SELECT 
                    SQRT(SUM(tf_idf * tf_idf)) AS mgnitude
                FROM
                    (SELECT 
                    input.tf * IFNULL(trained.idf, 0) AS tf_idf
                FROM
                    (SELECT 
                    keyword, AVG(tf) AS tf
                FROM
                    knn.client_vector
				WHERE id = #{id}
                GROUP BY keyword) AS input
                LEFT OUTER JOIN (SELECT 
                    keyword, AVG(idf) AS idf
                FROM
                    knn.trained_vector
                GROUP BY keyword) AS trained ON input.keyword = trained.keyword
                ORDER BY tf_idf DESC
                LIMIT 360) input) AS tf_idf
    FROM
        (SELECT 
        keyword, AVG(tf) AS tf
    FROM
        knn.client_vector
	WHERE id = #{id}
    GROUP BY keyword) AS input
    LEFT OUTER JOIN (SELECT 
        keyword, AVG(idf) AS idf
    FROM
        knn.trained_vector
    GROUP BY keyword) AS trained ON input.keyword = trained.keyword
    ORDER BY tf_idf DESC
    LIMIT 360) AS input
    LEFT OUTER JOIN (SELECT 
        *
    FROM
        knn.trained_vector) AS trained ON input.keyword = trained.keyword UNION SELECT 
        IFNULL(input.keyword, trained.keyword) AS keyword,
            IFNULL(input.tf_idf, 0) AS in_tf_idf,
            IFNULL(trained.tf_idf, 0) AS tr_tf_idf,
            trained.file_name
    FROM
        (SELECT 
        input.keyword,
            input.tf,
            IFNULL(trained.idf, 0),
            input.tf * IFNULL(trained.idf, 0) / (SELECT 
                    SQRT(SUM(tf_idf * tf_idf)) AS mgnitude
                FROM
                    (SELECT 
                    input.tf * IFNULL(trained.idf, 0) AS tf_idf
                FROM
                    (SELECT 
                    keyword, AVG(tf) AS tf
                FROM
                    knn.client_vector
				WHERE id = #{id}
                GROUP BY keyword) AS input
                LEFT OUTER JOIN (SELECT 
                    keyword, AVG(idf) AS idf
                FROM
                    knn.trained_vector
                GROUP BY keyword) AS trained ON input.keyword = trained.keyword
                ORDER BY tf_idf DESC
                LIMIT 360) input) AS tf_idf
    FROM
        (SELECT 
        keyword, AVG(tf) AS tf
    FROM
        knn.client_vector
	WHERE id = #{id}
    GROUP BY keyword) AS input
    LEFT OUTER JOIN (SELECT 
        keyword, AVG(idf) AS idf
    FROM
        knn.trained_vector
    GROUP BY keyword) AS trained ON input.keyword = trained.keyword
    ORDER BY tf_idf DESC
    LIMIT 360) AS input
    RIGHT OUTER JOIN (SELECT 
        *
    FROM
        knn.trained_vector) AS trained ON input.keyword = trained.keyword) AS dimension
    WHERE
        file_name IS NOT NULL
    GROUP BY file_name
    ORDER BY distance
    LIMIT 10) test
GROUP BY label
ORDER BY average
</select>
<select id="getKnnDistance" resultType = "KnnResult" parameterType="Integer">
SELECT file_name,sqrt(sum(pow(dimension.in_tf_idf - dimension.tr_tf_idf,2))) as distance
FROM(
    SELECT 
		IFNULL(input.keyword,trained.keyword) as keyword,
		IFNULL(input.tf_idf, 0) AS in_tf_idf,
		IFNULL(trained.tf_idf, 0) AS tr_tf_idf,
        trained.file_name
	FROM
		(SELECT 
    input.keyword,
    input.tf,
     IFNULL(trained.idf,0),
    input.tf *  IFNULL(trained.idf,0) /
    (
SELECT 
    sqrt(sum(tf_idf * tf_idf)) as mgnitude
FROM
    (
SELECT 
    input.tf *  IFNULL(trained.idf,0) AS tf_idf
FROM
    (SELECT 
        keyword, AVG(tf) AS tf
    FROM
        knn.client_vector
	WHERE id = #{id}
    GROUP BY keyword) AS input
        LEFT OUTER JOIN
    (SELECT 
        keyword, AVG(idf) AS idf
    FROM
        knn.trained_vector
    GROUP BY keyword) AS trained ON input.keyword = trained.keyword
ORDER BY tf_idf DESC
limit 360
)input
) AS tf_idf
FROM
    (SELECT 
        keyword, AVG(tf) AS tf
    FROM
        knn.client_vector
	WHERE id = #{id}
    GROUP BY keyword) AS input
        LEFT OUTER JOIN
    (SELECT 
        keyword, AVG(idf) AS idf
    FROM
        knn.trained_vector
    GROUP BY keyword) AS trained ON input.keyword = trained.keyword
ORDER BY tf_idf DESC
limit 360) AS input
			LEFT OUTER JOIN
		(SELECT 
			*
		FROM
			knn.trained_vector
		) AS trained ON input.keyword = trained.keyword 
	UNION SELECT 
		IFNULL(input.keyword,trained.keyword) as keyword,
		IFNULL(input.tf_idf, 0) AS in_tf_idf,
		IFNULL(trained.tf_idf, 0) AS tr_tf_idf,
        trained.file_name
	FROM
		(SELECT 
    input.keyword,
    input.tf,
     IFNULL(trained.idf,0),
    input.tf *  IFNULL(trained.idf,0) /
    (
SELECT 
    sqrt(sum(tf_idf * tf_idf)) as mgnitude
FROM
    (
SELECT 
    input.tf *  IFNULL(trained.idf,0) AS tf_idf
FROM
    (SELECT 
        keyword, AVG(tf) AS tf
    FROM
        knn.client_vector
	WHERE id = #{id}
    GROUP BY keyword) AS input
        LEFT OUTER JOIN
    (SELECT 
        keyword, AVG(idf) AS idf
    FROM
        knn.trained_vector
    GROUP BY keyword) AS trained ON input.keyword = trained.keyword
ORDER BY tf_idf DESC
limit 360
)input
) AS tf_idf
FROM
    (SELECT 
        keyword, AVG(tf) AS tf
    FROM
        knn.client_vector
	WHERE id = #{id}
    GROUP BY keyword) AS input
        LEFT OUTER JOIN
    (SELECT 
        keyword, AVG(idf) AS idf
    FROM
        knn.trained_vector
    GROUP BY keyword) AS trained ON input.keyword = trained.keyword
ORDER BY tf_idf DESC
limit 360) AS input
			RIGHT OUTER JOIN
		(SELECT 
			*
		FROM
			knn.trained_vector
		) AS trained ON input.keyword = trained.keyword
	) as dimension
where file_name is not null
group by file_name
ORDER BY distance
LIMIT 3
</select>
<select id="getLabel" resultType="String" parameterType="String">
SELECT DISTINCT
    (label) AS label
FROM
    knn.trained_vector
WHERE 
	file_name = #{file_name}
</select>
  </mapper>
  
  <!-- CREATE TABLE `client_vector` (\n  `id` int(11) DEFAULT NULL,\n  `file_name` varchar(500) DEFAULT NULL,\n  `keyword` varchar(50) DEFAULT NULL,\n  `tf` double DEFAULT NULL,\n  `seq` int(11) NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`seq`),\n  KEY `INDEX_WORD` (`keyword`)\n) ENGINE=InnoDB AUTO_INCREMENT=626294 DEFAULT CHARSET=utf8-->
  <!-- CREATE TABLE `trained_vector` (\n  `file_name` varchar(500) DEFAULT NULL,\n  `keyword` varchar(50) DEFAULT NULL,\n  `label` varchar(500) DEFAULT NULL,\n  `tf` double DEFAULT NULL,\n  `idf` double DEFAULT NULL,\n  `tf_idf` double DEFAULT NULL,\n  `df` double DEFAULT NULL,\n  `seq` int(11) NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`seq`),\n  KEY `INDEX_WORD` (`keyword`)\n) ENGINE=InnoDB AUTO_INCREMENT=1625112 DEFAULT CHARSET=utf8 -->
   